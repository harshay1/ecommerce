var mongoose = require('mongoose');
var bcrypt = require('bcrypt-nodejs');
var Schema = mongoose.Schema;

/* User Schema attributes / characteristics or fields */

var UserSchema = new Schema({
  email: {type: String, unique: true, lowercase: true},
  password: String,

  profile: {
    firstname: {type: String, default: ''},
    lastname: {type: String, default: ''},
    picture: {type: String, default: ''}
  },

  address: String,
  history: [{
    date: Date,
    paid: {type: Number, default: 0},
    // item: {type: Schema.Types.ObjectId, ref:''}

  }]
});


/* Hash the password before we even save it to the database */

UserSchema.pre('save', function(next){
  var user = this;
  if(!user.isModified('password')) return next();
  //below 10 means it generates 10 random data 1234578hj
  bcrypt.genSalt(10, function(err, salt){
    if(err) return next(err);
    bcrypt.hash(user.password, salt, null, function(err, hash){
      if(err) return next(err);
      //the hash here is the random unique string which genereated
      user.password = hash;
      next();
    });
  });
});

/* Compare password in the database with the one typed by User */

UserSchema.methods.comparePassword = function(password){
  return bcrypt.compareSync(password, this.password);
}

//below line is used to export the entire above schema to the server.js file
module.exports = mongoose.model('user', UserSchema);
